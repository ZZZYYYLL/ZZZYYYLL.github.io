<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python基础语法</title>
      <link href="/2022/07/28/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/28/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串转化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.title()) <span class="comment"># 首字母大写 &quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.upper()) <span class="comment"># 转大写 &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.lower()) <span class="comment"># 转小写 &quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串拼接</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1 + str2) <span class="comment"># &quot;helloworld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1 * <span class="number">2</span>) <span class="comment"># &quot;hellohello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>.join(str1)) <span class="comment"># &quot;h-e-l-l-o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串统计</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>]) <span class="comment"># &quot;h&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">1</span>]) <span class="comment"># &quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串切片、提取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># 下标0到3 &quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment"># 下标0到3 步长2 &quot;ad&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:]) <span class="comment"># 下标4到结束 &quot;fg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[:]) <span class="comment"># 全部 &quot;abdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>]) <span class="comment"># 反向 &quot;gfedba&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串切割</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&quot;this is my first python note&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot; &quot;</span>)) <span class="comment"># [&#x27;this&#x27;, &#x27;is&#x27;, &#x27;my&#x27;, &#x27;first&#x27;, &#x27;python&#x27;, &#x27;note&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>)) <span class="comment"># [&#x27;this&#x27;, &#x27;is&#x27;, &#x27;my first python note&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串删除</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">test = <span class="string">&quot; test python &quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.lstrip()) <span class="comment"># 删除首空格 &quot;test python &quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.rstrip()) <span class="comment"># 删除尾空格 &quot; test python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.strip()) <span class="comment"># 删除首尾空格 &quot;test python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串查找</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;b&#x27;</span>)) <span class="comment"># 找到返回下标 1</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;k&#x27;</span>)) <span class="comment"># 没找到返回 -1</span></span><br></pre></td></tr></table></figure><h2 id="列表常见操作"><a href="#列表常见操作" class="headerlink" title="列表常见操作"></a>列表常见操作</h2><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><ul><li>通过下标访问</li></ul><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><ul><li>通过下标修改</li></ul><h3 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h3><ul><li><p><code>append()</code>，添加至末尾</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [] </span><br><span class="line">motorcycles.append(<span class="string">&#x27;honda&#x27;</span>) </span><br><span class="line">motorcycles.append(<span class="string">&#x27;yamaha&#x27;</span>) </span><br><span class="line">motorcycles.append(<span class="string">&#x27;suzuki&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>insert()</code>，在任意位置添加</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><ul><li><p><code>del()</code>，删除对应位置的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>pop()</code>，既删除，也返回对应值，默认弹出末尾元素，带参可以弹出任意元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle) <span class="comment"># &#x27;suzuki&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>remove()</code>，参数为列表里面的值，若不存在会报错</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><ul><li><p><code>sort()</code>，永久排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># [&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cars.sort(reverse=True) </span></span><br><span class="line"><span class="string">print(cars) # [&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>sorted(),临时排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">sortedCars = <span class="built_in">sorted</span>(cars)</span><br><span class="line"><span class="built_in">print</span>(sortedCars) <span class="comment"># [&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>由一个个键-值对构成（K-V)，相当于哈希表</li></ul><h3 id="判断是否存在某个key值"><a href="#判断是否存在某个key值" class="headerlink" title="判断是否存在某个key值"></a>判断是否存在某个key值</h3><ul><li><p><code>__contain__</code>，返回一个bool类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">800</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien.__contains__(<span class="string">&#x27;yes&#x27;</span>)) <span class="comment"># 返回False</span></span><br><span class="line"><span class="built_in">print</span>(alien.__contains__(<span class="string">&#x27;color&#x27;</span>)) <span class="comment"># 返回True</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片测试</title>
      <link href="/2022/06/16/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/06/16/%E5%9B%BE%E7%89%87%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="图片上传测试"><a href="#图片上传测试" class="headerlink" title="图片上传测试"></a>图片上传测试</h1><p><img src="/.io//test.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试页面</title>
      <link href="/2022/06/09/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/06/09/%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1.两数之和"></a>1.两数之和</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整数数组<code>nums</code>和一个整数目标值 <code>target</code>，请你在该数组中找出<strong>和为目标值</strong>*<code>target</code>*那<strong>两个</strong>整数，并返回它们的数组下标。</p><aside>➡️ **输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。**</aside><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a><strong>暴力解法</strong></h3><ul><li>通过双重循环遍历数组</li><li>时间复杂度为O（n^2）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//暴力解法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                    result[<span class="number">0</span>] = i;</span><br><span class="line">                    result[<span class="number">1</span>] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="hashmap解法"><a href="#hashmap解法" class="headerlink" title="hashmap解法"></a><strong>hashmap解法</strong></h3><ul><li>由于哈希查找的时间复杂度为 O(1)<em>O</em>(1)，所以可以利用哈希容器 map 降低时间复杂度</li><li>遍历数组 nums，i 为当前下标，每个值都判断map中是否存在 <code>target-nums[i]</code> 的 key 值</li><li>如果存在则找到了两个值，如果不存在则将当前的 <code>(nums[i],i)</code> 存入 map 中，继续遍历直到找到为止</li><li>如果最终都没有结果则抛出异常</li><li>时间复杂度O（n）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//hashmap求解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(nums[i], i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;No two sum solution&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="四分法"><a href="#四分法" class="headerlink" title="四分法"></a>四分法</h3><ul><li>首尾双指针往中间遍历</li><li>时间复杂度O（n&#x2F;2 *logn）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="type">int</span>[] result = &#123;<span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = nums.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] == target) &#123;</span><br><span class="line">                <span class="comment">// Lucky</span></span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// should be in [i+1, j-1], find them with double pointers.</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> target - nums[j];</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + <span class="number">1</span>, m = j - <span class="number">1</span>; k &lt;= m; k++, m--) &#123;</span><br><span class="line">                result[<span class="number">0</span>] = i;</span><br><span class="line">                <span class="keyword">if</span> (nums[k] == x) &#123;</span><br><span class="line">                    result[<span class="number">1</span>] = k;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[m] == x) &#123;</span><br><span class="line">                    result[<span class="number">1</span>] = m;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                result[<span class="number">1</span>] = j;</span><br><span class="line">                <span class="keyword">if</span> (nums[k] == y) &#123;</span><br><span class="line">                    result[<span class="number">0</span>] = k;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[m] == y) &#123;</span><br><span class="line">                    result[<span class="number">0</span>] = m;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
