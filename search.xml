<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java并发程序设计学习笔记3</title>
      <link href="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
      <url>/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>主要介绍了重入锁，重入锁的”好搭档”Condition，信号量，一些线程控制工具和限流的概念。</p></blockquote><h2 id="重入锁"><a href="#重入锁" class="headerlink" title="重入锁"></a>重入锁</h2><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li><code>lock()</code>，获得锁，如果锁被占用则等待</li><li><code>lockInterruptibly()</code>，获得锁，但优先相应中断</li><li><code>tryLock()</code>，尝试获得锁，若成功，返回true；否则false。不等待，立即返回</li><li><code>tryLock(long time, TimeUnit unit)</code>，在给定的时间内尝试获得锁</li><li><code>unlcok()</code>，释放锁</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReenterLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; <span class="number">1000000</span>; j++) &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException&#123;</span><br><span class="line">        <span class="type">ReenterLock</span> <span class="variable">reenterLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReenterLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(reenterLock);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(reenterLock);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>与关键字synchronized相比，重入锁有着明显的操作过程，必须手动加锁和释放锁，<strong>灵活性更高</strong>。重入锁还体现了<strong>中断响应</strong>、<strong>锁申请限时等待</strong>、<strong>公平锁</strong>。</p><h3 id="中断响应"><a href="#中断响应" class="headerlink" title="中断响应"></a>中断响应</h3><p>对锁的请求，使用<code>lockInterruptibly()</code>方法，这是一个对中断进行相应的锁申请动作，即在锁申请的过程中，可以相应中断。</p><h3 id="锁申请限时等待"><a href="#锁申请限时等待" class="headerlink" title="锁申请限时等待"></a>锁申请限时等待</h3><p><code>tryLock()</code>方法接收两个参数，一个表示等待时长，一个表示计时单位。如<code>lock.tryLock(5,TimeUnit.SECONDS)</code>，若超过等待时长，返回false；否则为true。同样也可以不带任何参数，申请锁成功则<strong>立即返回</strong>true；否则<strong>立即返回</strong>false。</p><h3 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h3><p>在声明重入锁的时候，将锁声明为公平锁，（默认值为false），即：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ReenterLock</span> <span class="variable">reenterLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReenterLock</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> chapter3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FairLock</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">ReentrantLock</span> <span class="variable">fairLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                fairLock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getId() + <span class="string">&quot;:get lock&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                fairLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FairLock</span> <span class="variable">fairLock1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FairLock</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(fairLock1, <span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(fairLock1, <span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>公平锁运行结果</strong>：</p><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906150004188.png" alt="image-20220906150004188"></p><p><strong>非公平锁运行结果</strong>：</p><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906150114841.png" alt="image-20220906150114841"></p><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906150203887.png" alt="image-20220906150203887"></p><p>可以明显的区分，<strong>公平锁</strong>是使两个线程交替获得锁；<strong>非公平锁</strong>则是根据系统的调度，一个线程更倾向于再次获取已经持有的锁。<strong>公平锁</strong>要求系统维护一个有序的队列，成本高，性能低下；<strong>非公平锁</strong>分配的方式是高效的，但是无公平可言</p><h2 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h2><blockquote><p>重入锁的好搭档</p></blockquote><h3 id="主要方法-1"><a href="#主要方法-1" class="headerlink" title="主要方法"></a>主要方法</h3><ul><li><code>await()</code>使当前进程等待，并释放当前锁。</li><li><code>awaitUninterruptibly</code>与<code>await()</code>一样，只不过在等待过程中不会响应中断。</li><li><code>siginal()</code>唤醒一个等待线程，<code>signalALL()</code>唤醒所有等待线程。</li></ul><h2 id="信号量（Semaphore）"><a href="#信号量（Semaphore）" class="headerlink" title="信号量（Semaphore）"></a>信号量（Semaphore）</h2><h3 id="主要方法-2"><a href="#主要方法-2" class="headerlink" title="主要方法"></a>主要方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数表示信号量的准入量，第二个参数表示是否公平</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits, <span class="type">boolean</span> fair)</span></span><br></pre></td></tr></table></figure><ul><li><code>acquire()</code>尝试获得一个准入的许可。若无法获得则等待，直到有线程释放许可或当前线程被中断。</li><li><code>acquireUninterruptibly()</code>与<code>acquire()</code>一样，但不响应中断。</li><li><code>tryAcquire()</code>尝试获得一个准入许可，成功返回true；否则false。也可以带参数。与<code>tryLock()</code>类似。</li><li><code>release()</code>释放一个准入的许可</li></ul><h2 id="线程控制工具类"><a href="#线程控制工具类" class="headerlink" title="线程控制工具类"></a>线程控制工具类</h2><h3 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h3><p>实现线程之间计数等待。</p><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906155319147.png" alt="image-20220906155319147"></p><h3 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h3><p>除了实现线程间的计数等待，改计数器还可以循环使用。</p><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906155427896.png" alt="image-20220906155427896"></p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p><strong>为什么要限流？</strong></p><p>任何应用和模块组件都有一定的访问速率上限，如果请求速率突破了这个上限，不但多余的请求无法处理，甚至会压垮系统使所有的请求均无法有效处理。因此，对请求进行限流是非常必要的。一般的限流算法包括<strong>漏桶算法</strong>和<strong>令牌桶算法</strong></p><h3 id="漏桶算法"><a href="#漏桶算法" class="headerlink" title="漏桶算法"></a>漏桶算法</h3><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906190135791.png" alt="image-20220906190135791"></p><h4 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h4><p>利用一个缓存区，当有请求进入系统时，无论请求的速率如何，都先在缓存区内保存，然后以固定的流速流出缓存区进行处理。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>漏桶算法的特点是无论外部请求压力如何，漏桶算法总是以固定的流速处理数据。漏桶的容积和流出速率是该算法的两个重要参数。</p><h3 id="令牌桶算法"><a href="#令牌桶算法" class="headerlink" title="令牌桶算法"></a>令牌桶算法</h3><p><img src="/2022/09/05/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/image-20220906191335365.png" alt="image-20220906191335365"></p><h4 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h4><p>令牌桶算法是一种反向的漏桶算法。在令牌桶算法中，桶中存放的不再是请求，而是令牌。处理程序只有拿到令牌后，才能对请求进行处理。如果没有令牌，那么处理程序要么丢弃请求，要么等待可用的令牌。为了限制流速，该算法在每个单位时间产生一定量的令牌存入桶中。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发程序设计学习笔记2</title>
      <link href="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
      <url>/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>主要介绍线程的各种状态，volatile关键字的详细解读，以及守护线程的概念和作用</p></blockquote><h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">State</span> &#123;</span><br><span class="line">NEW,</span><br><span class="line">RUNNABLE,</span><br><span class="line">BLOCKED,</span><br><span class="line">WAITING,</span><br><span class="line">TIME_WAITING,</span><br><span class="line">TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>NEW</strong></p><p>表示刚刚创建好的线程，还没有开始执行</p></li><li><p><strong>RUNNABLE</strong></p><p>线程一切所需的资源都准备好了，执行状态</p></li><li><p><strong>BLOCK</strong></p><p>阻塞状态，如遇到synchronized同步块</p></li><li><p><strong>WAITING</strong></p><p>无时间限制的等待，比如通过wait()方法的线程来等待notify()方法，join()方法等待的线程会等待目标线程的终止</p></li><li><p><strong>TIMED_WAITING</strong></p><p>有时间限制的等待</p></li><li><p><strong>TERMINATED</strong></p><p>结束状态</p></li></ul><h2 id="Volatile关键字"><a href="#Volatile关键字" class="headerlink" title="Volatile关键字"></a>Volatile关键字</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>​Java语言提供一中稍弱的同步机制，即volatile变量，用来确保变量的更新通知到其他线程。当声明了volatile变量，编译器<strong>不会将该变量上的操作与其他内存操作一起重排序</strong>。volatile变量<strong>不会被缓存在寄存器或者对其他处理器不可见的地方</strong>（确保了可见性），因此在读取volatile类型的变量时总会返回最新写入的值。</p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/731716-20160708224602686-2141387366-16622746856931.png"></p><p>​当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</p><p>​<strong>而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步。</strong></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>保证此变量对所有的线程的可见性</li><li>禁止指令重排序优化</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoVisibility</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">boolean</span> ready;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReaderThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!ready);</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ReaderThread</span>().start();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        number = <span class="number">42</span>;</span><br><span class="line">        ready = <span class="literal">true</span>;</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​当ready变量没有加volatile关键字的时候，读线程**”看不到”** ready发生了变化，会陷入死循环，打印不出number的值。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>volatile只能确保数据的可见性和有序性，但却不能确保数据的原子性，尤其是一些复合操作，例如：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VolatileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">TaskPlus</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; <span class="number">10000</span>; k++) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        Thread[] threads = <span class="keyword">new</span> <span class="title class_">Thread</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i] = <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">TaskPlus</span>());</span><br><span class="line">            threads[i].start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            threads[i].join();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/image-20220904152651301.png" alt="image-20220904152651301"></p><h2 id="守护线程（DAEMON"><a href="#守护线程（DAEMON" class="headerlink" title="守护线程（DAEMON)"></a>守护线程（DAEMON)</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DaemonDemon</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DaemonT</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;I am alive&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DaemonT</span>();</span><br><span class="line">            thread.setDaemon(<span class="literal">true</span>);</span><br><span class="line">            thread.start();</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/image-20220904153427646.png" alt="image-20220904153427646"></p><p>​当thread被设置为守护线程，main线程在休眠2秒后推出，整个程序也随之结束。若thread没有被设置为守护线程，当main线程退出后，thread线程还在不断打印。</p><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>​设置守护线程必须在线程开始之前，否则会出现下面的异常</p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/image-20220904153952247.png" alt="image-20220904153952247"></p><p>​虽然程序依旧可以运行，但是守护线程设置未成功，程序停不下来。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发程序设计学习笔记1</title>
      <link href="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
      <url>/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
      
        <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>主要介绍一些基础知识和JMM的特性</p></blockquote><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h3><ul><li><p><strong>同步方法</strong>调用一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。</p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1680783-20190521124754180-1985908967.png"></p></li></ul><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><ul><li><p><strong>异步方法</strong>调用更像一个消息传递，一旦开始，方法调用就会立即返回，调用者就可以继续后续的操作。而，异步方法通常会在另外一个线程中，“真实”地执行着。整个过程，不会阻碍调用者的工作</p><p><img src="/2022/09/04/Java%E5%B9%B6%E5%8F%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/1680783-20190521125411515-1327485285.png"></p></li></ul><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><ul><li>偏重于多个任务交替进行，在使用者看来，多个任务是“同时进行的”</li></ul><h3 id="并行"><a href="#并行" class="headerlink" title="并行"></a>并行</h3><ul><li>真正意义上的同时进行</li></ul><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><ul><li><strong>临界区</strong>指的是一个访问公用资源的程序片段，这些公共资源又无法同时被多个线程访问的特性，当有线程进入临界区段是，其他线程或者进程必须等待</li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><ul><li><strong>死锁</strong>是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。</li><li><strong>死锁产生</strong>的四个必要条件<ol><li>互斥条件</li><li>请求与保持条件</li><li>不可剥夺条件</li><li>循环等待条件</li></ol></li></ul><h3 id="饥饿"><a href="#饥饿" class="headerlink" title="饥饿"></a>饥饿</h3><ul><li><strong>饥饿</strong>是指某一个或者多个线程因为种种原因无法获得所需要的资源，导致一直无法执行</li></ul><h2 id="Java的内存模型（JMM）"><a href="#Java的内存模型（JMM）" class="headerlink" title="Java的内存模型（JMM）"></a>Java的内存模型（JMM）</h2><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><ul><li><strong>原子性是指一个操作是不可中断的。</strong>即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其它线程干扰。</li></ul><h3 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h3><ul><li><strong>可见性，是指线程之间的可见性，一个线程修改的状态对另一个线程是可见的。</strong>也就是一个线程修改的结果。另一个线程马上就能看到。比如：用volatile修饰的变量，就会具有可见性。volatile修饰的变量不允许线程内部缓存和重排序，即直接修改内存。所以对其他线程是可见的。</li></ul><h3 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h3><ul><li>Java 语言提供了 volatile 和 synchronized 两个关键字来保证线程之间操作的有序性，此规则决定了持有同一个对象锁的两个同步块只能串行执行。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础语法</title>
      <link href="/2022/07/28/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/07/28/Python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串常见操作"><a href="#字符串常见操作" class="headerlink" title="字符串常见操作"></a>字符串常见操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&quot;hello World&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串转化</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.title()) <span class="comment"># 首字母大写 &quot;Hello World&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.upper()) <span class="comment"># 转大写 &quot;HELLO WORLD&quot;</span></span><br><span class="line"><span class="built_in">print</span>(message.lower()) <span class="comment"># 转小写 &quot;hello world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串拼接</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;hello&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;world&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str1 + str2) <span class="comment"># &quot;helloworld&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1 * <span class="number">2</span>) <span class="comment"># &quot;hellohello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span>.join(str1)) <span class="comment"># &quot;h-e-l-l-o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串统计</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(str1)) <span class="comment"># 5</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>]) <span class="comment"># &quot;h&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[-<span class="number">1</span>]) <span class="comment"># &quot;o&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串切片、提取</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">str1 = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment"># 下标0到3 &quot;abcd&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">0</span>:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment"># 下标0到3 步长2 &quot;ad&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1[<span class="number">4</span>:]) <span class="comment"># 下标4到结束 &quot;fg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[:]) <span class="comment"># 全部 &quot;abdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[::-<span class="number">1</span>]) <span class="comment"># 反向 &quot;gfedba&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串切割</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&quot;this is my first python note&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot; &quot;</span>)) <span class="comment"># [&#x27;this&#x27;, &#x27;is&#x27;, &#x27;my&#x27;, &#x27;first&#x27;, &#x27;python&#x27;, &#x27;note&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&quot; &quot;</span>, <span class="number">2</span>)) <span class="comment"># [&#x27;this&#x27;, &#x27;is&#x27;, &#x27;my first python note&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串删除</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">test = <span class="string">&quot; test python &quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.lstrip()) <span class="comment"># 删除首空格 &quot;test python &quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.rstrip()) <span class="comment"># 删除尾空格 &quot; test python&quot;</span></span><br><span class="line"><span class="built_in">print</span>(test.strip()) <span class="comment"># 删除首尾空格 &quot;test python&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">字符串查找</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">s = <span class="string">&quot;abcdefg&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;b&#x27;</span>)) <span class="comment"># 找到返回下标 1</span></span><br><span class="line"><span class="built_in">print</span>(s.find(<span class="string">&#x27;k&#x27;</span>)) <span class="comment"># 没找到返回 -1</span></span><br></pre></td></tr></table></figure><h2 id="列表常见操作"><a href="#列表常见操作" class="headerlink" title="列表常见操作"></a>列表常见操作</h2><h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><ul><li>通过下标访问</li></ul><h3 id="修改列表元素"><a href="#修改列表元素" class="headerlink" title="修改列表元素"></a>修改列表元素</h3><ul><li>通过下标修改</li></ul><h3 id="添加列表元素"><a href="#添加列表元素" class="headerlink" title="添加列表元素"></a>添加列表元素</h3><ul><li><p><code>append()</code>，添加至末尾</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [] </span><br><span class="line">motorcycles.append(<span class="string">&#x27;honda&#x27;</span>) </span><br><span class="line">motorcycles.append(<span class="string">&#x27;yamaha&#x27;</span>) </span><br><span class="line">motorcycles.append(<span class="string">&#x27;suzuki&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>insert()</code>，在任意位置添加</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">motorcycles.insert(<span class="number">0</span>, <span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;ducati&#x27;, &#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="删除列表元素"><a href="#删除列表元素" class="headerlink" title="删除列表元素"></a>删除列表元素</h3><ul><li><p><code>del()</code>，删除对应位置的元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">0</span>] </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>pop()</code>，既删除，也返回对应值，默认弹出末尾元素，带参可以弹出任意元素</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>] </span><br><span class="line">popped_motorcycle = motorcycles.pop()</span><br><span class="line"><span class="built_in">print</span>(popped_motorcycle) <span class="comment"># &#x27;suzuki&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><code>remove()</code>，参数为列表里面的值，若不存在会报错</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles = [<span class="string">&#x27;honda&#x27;</span>, <span class="string">&#x27;yamaha&#x27;</span>, <span class="string">&#x27;suzuki&#x27;</span>, <span class="string">&#x27;ducati&#x27;</span>] </span><br><span class="line">motorcycles.remove(<span class="string">&#x27;ducati&#x27;</span>) </span><br><span class="line"><span class="built_in">print</span>(motorcycles) <span class="comment"># [&#x27;honda&#x27;, &#x27;yamaha&#x27;, &#x27;suzuki&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><ul><li><p><code>sort()</code>，永久排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars) <span class="comment"># [&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">cars.sort(reverse=True) </span></span><br><span class="line"><span class="string">print(cars) # [&#x27;toyota&#x27;, &#x27;subaru&#x27;, &#x27;bmw&#x27;, &#x27;audi&#x27;]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>sorted(),临时排序</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>, <span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;toyota&#x27;</span>, <span class="string">&#x27;subaru&#x27;</span>] </span><br><span class="line">sortedCars = <span class="built_in">sorted</span>(cars)</span><br><span class="line"><span class="built_in">print</span>(sortedCars) <span class="comment"># [&#x27;audi&#x27;, &#x27;bmw&#x27;, &#x27;subaru&#x27;, &#x27;toyota&#x27;]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><ul><li>由一个个键-值对构成（K-V)，相当于哈希表</li></ul><h3 id="判断是否存在某个key值"><a href="#判断是否存在某个key值" class="headerlink" title="判断是否存在某个key值"></a>判断是否存在某个key值</h3><ul><li><p><code>__contain__</code>，返回一个bool类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">800</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien.__contains__(<span class="string">&#x27;yes&#x27;</span>)) <span class="comment"># 返回False</span></span><br><span class="line"><span class="built_in">print</span>(alien.__contains__(<span class="string">&#x27;color&#x27;</span>)) <span class="comment"># 返回True</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
